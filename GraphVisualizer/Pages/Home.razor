@page "/"
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Scripting
@using Microsoft.CodeAnalysis.Scripting
@using GraphVisualizer.Services
@using System.Reflection
@using System.Runtime.Loader
@using Microsoft.CodeAnalysis.Text

@inject ScriptLoaderService ScriptLoader

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@code{
    public class Test1
    {
        public int check()
        {
            return 10;
        }
    }
    string _textarea = @"
using System;

namespace RoslynCompileSample
{
    public class Writer
    {
        public string Write(string message)
        {
            var ret = message + DateTime.Now;
            int a = 0;
            Console.WriteLine(a);
            return ret;
        }
    }
}";
    string code = @"
using System;
namespace test11
{
    public class Test1
    {
        public int Check()
        {
            
            return 10 + 20;
        }
    }
}

";

    protected override async Task OnInitializedAsync()
    {

        string code2 = @"
Console.WriteLine(""test"")

";
        var options = CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp8).WithKind(SourceCodeKind.Regular);
        var codeString = SourceText.From(Compiler.BaseCode);
        var syntaxTree = SyntaxFactory.ParseSyntaxTree(codeString, options);

        var assemblyNames = Assembly.GetEntryAssembly()!.GetReferencedAssemblies();
        List<MetadataReference> assembles = new List<MetadataReference>();
        foreach (var name in assemblyNames)
        {
            assembles.Add(await ScriptLoader.GetAssemblyMetadataReference(Assembly.Load(name)));
        }
        assembles.Add(await ScriptLoader.GetAssemblyMetadataReference(typeof(int).Assembly));
        assembles.Add(await ScriptLoader.GetAssemblyMetadataReference(typeof(GraphLibrary.Node).Assembly));

        var compilationOptions = new CSharpCompilationOptions(
    OutputKind.DynamicallyLinkedLibrary,
    concurrentBuild: false,
    optimizationLevel: OptimizationLevel.Release

    );
        var compilation = CSharpCompilation.Create("run.dll", new[] { syntaxTree }, assembles, compilationOptions);
        using (MemoryStream memoryStream = new MemoryStream())
        {
            try
            {
                var result = compilation.Emit(memoryStream);

                if (result.Success)
                {
                    memoryStream.Seek(0, SeekOrigin.Begin);
                    var memoryData = memoryStream.ToArray();
                    var assemblyRun = Assembly.Load(memoryData);
                    var types = assemblyRun.GetTypes();
                    var test1 = assemblyRun.GetType("test11.Test1");
                    var test1instance = Activator.CreateInstance(test1);
                    var addMethod = test1.GetMethod("Check");
                    var r = (int)addMethod.Invoke(test1instance, new object[0]);
                    Console.WriteLine(r);
                }
                else
                {
                    foreach (var diagnostic in result.Diagnostics)
                    {
                        Console.WriteLine($"{diagnostic.Location}:{diagnostic.GetMessage()}");
                    }
                    Console.WriteLine("error");
                }
            }
            catch (Exception ex)
            {

            }

        }
        await base.OnInitializedAsync();

    }


    
}
