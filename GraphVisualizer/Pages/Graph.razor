@page "/"
@inject ScriptLoaderService ScriptService
@inject NavigationManager navigation
@using GraphLibrary
@using System.IO.Compression
@using GraphVisualizer.Services
@using System.Reflection
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Text.Unicode
@inject IJSRuntime JSRuntime
<div class="control-header">
    <h1 style="font-size:28px">GraphVisualizer</h1>

    @if(NowAction == null)
    {
        <button class="btn btn-success" @onclick="RunProgram">実行</button>

    }
    else
    {
        <button class="btn btn-danger" @onclick="StopProgram">停止</button>

    }
    @if (!isInterval)
    {
        <button class="btn btn-success" disabled="@wait_button_str" @onclick="nextStep">次へ</button>
    }

</div>

<div class="menu-header">

    <div>
        <input type="radio" class="btn-check" name="open-select" id="select-node" autocomplete="off" @onclick="clickViewNodeSetting" checked="@controlChecked">
        <label class="btn btn-outline-dark" for="select-node">ノード</label>
    </div>
    <div>
        <input type="radio" class="btn-check" name="open-select" id="select-program" autocomplete="off" @onclick="clickProgramSetting" checked = "@programChecked">
        <label class="btn btn-outline-dark" for="select-program">プログラム</label>
    </div>
</div>
<div class="url-block">
    <div class="input-group mb-3">
        <button class="btn btn-outline-secondary" type="button" id="button-addon1" @onclick="CreateURL">URLを生成</button>
        <input type="text" class="form-control" @bind-value="url"  readonly aria-describedby="button-addon1">
    </div>
</div>
<div class="control-views">
    @if (ControllerMenuVisible)
    {
        <div class="controller-tab over-control">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="isDirected" id="c1-direction">
                <label class="form-check-label" for="c1-direction">
                    有向グラフ
                </label>
            </div>
            <div class="border-radius5">
                <p>node</p>
                <div class="nodes list-group">
                    @foreach (var node in Nodes)
                    {
                        if (SelectedNode == node)
                        {
                            <button type="button" class="list-group-item list-group-item-action active">@(node.ID + ":" + node.Title)</button>

                        }
                        else
                        {
                            <button type="button" @onclick="()=>SelectNode(node)" class="list-group-item list-group-item-action">@(node.ID + ":" + node.Title)</button>

                        }
                    }

                </div>
                @if (SelectedNode != null)
                {

                    <div class="remove">
                        <span>nodeの削除</span>
                        <button class="button-right btn btn-danger" @onclick="clickNodeDelete">nodeの削除</button>

                    </div>
                    <div class="edit">
                        <p>選択中nodeの編集</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">nodeのタイトル</span>
                            <input type="text" class="form-control" @bind="editNodeTitle">
                        </div>
                        <button class="button-right btn btn-primary" @onclick="clickNodeEdit">nodeの編集</button>
                    </div>
                }


                <div class="create">
                    <p>nodeの追加</p>
                    <div class="input-group mb-3">
                        <span class="input-group-text">ID</span>
                        <input type="text" class="form-control" @bind="createNodeId">
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">nodeのタイトル</span>
                        <input type="text" class="form-control" @bind="createNodeTitle">
                    </div>
                    <button class="button-right btn btn-primary" @onclick="clickNodeCreate">nodeの追加</button>
                    <p style="color:red">@warningCreateNode</p>

                </div>
            </div>
            @if (SelectedNode != null)
            {
                <div class="border-radius5">
                    <p>edge</p>
                    <div class="edges list-group">

                        @foreach (var edge in SelectedNode.ToEdges)
                        {
                            if (SelectedToEdge != null && SelectedToEdge.ID == edge.ID)
                            {
                                <button type="button" class="list-group-item list-group-item-action active">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                            else
                            {
                                <button type="button" @onclick="()=>SelectToEdge(edge)" class="list-group-item list-group-item-action">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                        }

                    </div>
                    @if (SelectedToEdge != null)
                    {
                        <div class="remove">
                            <span>edgeの削除</span>
                            <button class="button-right btn btn-danger" @onclick="clickEdgeDelete">edgeを削除</button>

                        </div>

                        <div class="edit">

                            <p>edgeの編集</p>
                            <div class="input-group mb-3">
                                <span class="input-group-text">edgeの重み</span>
                                <input class="form-control" type="number" @bind="editEdgeWeighInput">
                            </div>

                            <div class="input-group mb-3">
                                <span class="input-group-text">接続先のnode</span>
                                <select @bind="EditToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                    @if (EditToEdgeNodeSelected == null)
                                    {
                                        <option value="@("")" selected>nodeの選択</option>

                                    }
                                    else
                                    {
                                        <option value="@("")">nodeの選択</option>

                                    }
                                    @foreach (var nodeSelect in Nodes)
                                    {
                                        @if (EditToEdgeNodeSelected == nodeSelect.ID)
                                        {
                                            <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                        }
                                        else
                                        {

                                            <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>


                                        }


                                    }

                                </select>
                            </div>

                            <button class="button-right btn btn-primary" @onclick="clickEdgeEdit">edgeを編集</button>
                            <p style="color:red">@editEdgeWarning</p>


                        </div>

                    }
                    <div class="create">
                        <p>edgeを追加</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">edgeの重み</span>
                            <input type="number" class="form-control" @bind="createEdgeWeighInput">
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">接続先のnode</span>
                            <select @bind="CreateToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                @if (CreateToEdgeNodeSelected == null || CreateToEdgeNodeSelected == "")
                                {
                                    <option value="@("")" selected>nodeの選択</option>
                                }
                                else
                                {
                                    <option value="@("")">nodeの選択</option>

                                }
                                @foreach (var nodeSelect in Nodes)
                                {
                                    @if (CreateToEdgeNodeSelected == nodeSelect.ID)
                                    {
                                        <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                    }
                                    else
                                    {

                                        <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>
                                    }


                                }

                            </select>
                        </div>

                        <button class="button-right btn btn-primary" @onclick="clickEdgeCreate">edgeを追加</button>
                        <p style="color:red">@createEdgeWarning</p>
                    </div>
                </div>

            }


        </div>

    }
    else if (ProgramMenuVisible)
    {
        <div class="over-control code-control">
            <p>C#のコード</p>
            <textarea class="form-control code-area" @bind="sourceCode"/>
        </div>
    }
    <div class="base">
        <div class="controller lritem">

            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="isDirected" id="c2-direction">
                <label class="form-check-label" for="c2-direction">
                    有向グラフ
                </label>
            </div>
            <div class="border-radius5">
                <p>node</p>
                <div class="nodes list-group">
                    @foreach (var node in Nodes)
                    {
                        if (SelectedNode == node)
                        {
                            <button type="button" class="list-group-item list-group-item-action active">@(node.ID + ":" + node.Title)</button>

                        }
                        else
                        {
                            <button type="button" @onclick="()=>SelectNode(node)" class="list-group-item list-group-item-action">@(node.ID + ":" + node.Title)</button>

                        }
                    }

                </div>
                @if (SelectedNode != null)
                {

                    <div class="remove">
                        <span>nodeの削除</span>
                        <button class="button-right btn btn-danger" @onclick="clickNodeDelete">nodeの削除</button>

                    </div>
                    <div class="edit">
                        <p>選択中nodeの編集</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">nodeのタイトル</span>
                            <input type="text" class="form-control" @bind="editNodeTitle">
                        </div>
                        <button class="button-right btn btn-primary" @onclick="clickNodeEdit">nodeの編集</button>
                    </div>
                }


                <div class="create">
                    <p>nodeの追加</p>
                    <div class="input-group mb-3">
                        <span class="input-group-text">ID</span>
                        <input type="text" class="form-control" @bind="createNodeId">
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">nodeのタイトル</span>
                        <input type="text" class="form-control" @bind="createNodeTitle">
                    </div>
                    <button class="button-right btn btn-primary" @onclick="clickNodeCreate">nodeの追加</button>
                    <p style="color:red">@warningCreateNode</p>

                </div>
            </div>
            @if (SelectedNode != null)
            {
                <div class="border-radius5">
                    <p>edge</p>
                    <div class="edges list-group">

                        @foreach (var edge in SelectedNode.ToEdges)
                        {
                            if (SelectedToEdge != null && SelectedToEdge.ID == edge.ID)
                            {
                                <button type="button" class="list-group-item list-group-item-action active">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                            else
                            {
                                <button type="button" @onclick="()=>SelectToEdge(edge)" class="list-group-item list-group-item-action">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                        }

                    </div>
                    @if (SelectedToEdge != null)
                    {
                        <div class="remove">
                            <span>edgeの削除</span>
                            <button class="button-right btn btn-danger" @onclick="clickEdgeDelete">edgeを削除</button>

                        </div>

                        <div class="edit">

                            <p>edgeの編集</p>
                            <div class="input-group mb-3">
                                <span class="input-group-text">edgeの重み</span>
                                <input class="form-control" type="number" @bind="editEdgeWeighInput">
                            </div>

                            <div class="input-group mb-3">
                                <span class="input-group-text">接続先のnode</span>
                                <select @bind="EditToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                    @if (EditToEdgeNodeSelected == null)
                                    {
                                        <option value="@("")" selected>nodeの選択</option>

                                    }
                                    else
                                    {
                                        <option value="@("")">nodeの選択</option>

                                    }
                                    @foreach (var nodeSelect in Nodes)
                                    {
                                        @if (EditToEdgeNodeSelected == nodeSelect.ID)
                                        {
                                            <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                        }
                                        else
                                        {

                                            <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>


                                        }


                                    }

                                </select>
                            </div>

                            <button class="button-right btn btn-primary" @onclick="clickEdgeEdit">edgeを編集</button>
                            <p style="color:red">@editEdgeWarning</p>


                        </div>

                    }
                    <div class="create">
                        <p>edgeを追加</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">edgeの重み</span>
                            <input type="number" class="form-control" @bind="createEdgeWeighInput">
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">接続先のnode</span>
                            <select @bind="CreateToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                @if (CreateToEdgeNodeSelected == null || CreateToEdgeNodeSelected == "")
                                {
                                    <option value="@("")" selected>nodeの選択</option>

                                }
                                else
                                {
                                    <option value="@("")">nodeの選択</option>

                                }
                                @foreach (var nodeSelect in Nodes)
                                {
                                    @if (CreateToEdgeNodeSelected == nodeSelect.ID)
                                    {
                                        <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                    }
                                    else
                                    {

                                        <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>


                                    }


                                }

                            </select>
                        </div>

                        <button class="button-right btn btn-primary" @onclick="clickEdgeCreate">edgeを追加</button>
                        <p style="color:red">@createEdgeWarning</p>


                    </div>
                </div>

            }

        </div>
        <div  class="center-item">
            <div id="cy"></div>
            <div class="output">
                <textarea id="output-area" class="form-control output-area" style="color:@(outputColor)" readonly @bind="output">

                </textarea>
            </div>
        </div>
        <div class="code-base code-control">
            <p>C#のコード</p>
            <textarea class="form-control code-area" @bind="sourceCode">

            </textarea>
        </div>

    </div>
</div>



<style>
    .base{
    display:flex;
    justify-items:stretch;
    justify-content: space-between;
    height:calc(100vh - 50px - 40px);
    }



    .control-header{
    height:50px;
    background-color:darkgray;
    display:flex;
    justify-content:flex-start;
    align-items:center;
    gap:20px;
    flex-wrap:wrap;
    text-align:center;
    padding:5px 20px;
    box-sizing:border-box;
    }

    .menu-header {

    display: none;
    }
    @@media screen and  (max-width:680px) {
    .base{
    height:calc(100vh - 80px - 60px - 40px);

    }
    .control-header{
    height:80px;

    }

    .menu-header {
    box-sizing: border-box;
    padding: 10px;
    height: 60px;
    width: 100%;
    display: flex;
    gap:20px;
    background-color:#AAAAAA;
    }
    }
    .interval-number{
    width:200px

    }
    .controller{
    background-color:lightgray;
    padding:10px;
    overflow: auto;
    overflow-y: scroll;
    width: 400px;
    min-width:300px;
    }

    .center-item {
    flex-grow: 1;
    min-width:300px;
    }
    #cy{
    height: calc(100% - 100px);
    width:100%;
    }
    .output{
    height:100px;
    }
    .output-area{
    height:100%;
    }

    @@media screen and (max-width:820px) {
    .center-item {
    min-width: 200px;
    }
    }

    @@media screen and (max-width:500px) {
    .center-item {
    min-width: 30px;
    }
    }


    .edge{
    height:400px;
    }
    .nodes{
    max-height:200px;

    overflow: auto;
    overflow-y: scroll;
    }

    .edges {
    max-height: 200px;
    overflow: auto;
    overflow-y: scroll;
    }

    .remove {
    background-color: #f3f3f3;
    margin: 5px;
    border-radius: 5px;
    padding: 10px;
    }
    .edit {
    background-color: #f3f3f3;
    margin:5px;
    border-radius: 5px;
    padding: 10px;
    }
    .border-radius5{
    border-radius: 5px;
    border: 1px solid gray;
    padding: 10px;
    margin-bottom: 30px;
    }
    .create{
    background-color: #f3f3f3;
    padding:10px;
    margin: 5px;
    border-radius: 5px;
    }

    .button-right{
    display: block;
    margin-left: auto;
    margin-right:0;
    }
    .code-control{
    background-color:white;
    }
    .code-base{
    width:400px;
    min-width: 200px;

    }
    .code-area
    {
    width:100%;
    height: calc(100% - 120px - 40px);
    }

    @@media screen and (max-width:680px) {
    .code-base {
    display:none;
    }

    .controller {
    display:none;
    }
    }
    .url-block{
    height:40px;
    }
    .controller-tab {
    position:sticky;
    width:100vw;
    top:0;
    left:0;
    }
    .over-control {
    display:none;
    }
    @@media screen and  (max-width:680px){
    .over-control {
    display:block;
    position: absolute;

    width: 100vw;
    top: 0;
    left: 0;
    height: 80vh;
    background-color: white;
    z-index: 999;
    }
    }



    .control-views{
    position:relative;
    }
</style>

