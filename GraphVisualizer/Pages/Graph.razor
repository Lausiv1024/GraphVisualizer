@page "/"
@inject ScriptLoaderService ScriptService
@inject NavigationManager navigation
@using GraphLibrary
@using System.IO.Compression
@using GraphVisualizer.Services
@using System.Reflection
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Text.Unicode
@inject IJSRuntime JSRuntime
<div class="control-header">
    <h1 style="font-size:28px">GraphVisualizer</h1>

    @if(NowAction == null)
    {
        <button class="btn btn-success" @onclick="RunProgram">実行</button>

    }
    else
    {
        <button class="btn btn-danger" @onclick="StopProgram">停止</button>

    }
    @if (!isInterval)
    {
        <button class="btn btn-success" disabled="@wait_button_str" @onclick="nextStep">次へ</button>
    }

</div>

<div class="menu-header">

    <div>
        <input type="radio" class="btn-check" name="open-select" id="select-node" autocomplete="off" @onclick="clickViewNodeSetting" checked="@controlChecked">
        <label class="btn btn-outline-dark" for="select-node">ノード</label>
    </div>
    <div>
        <input type="radio" class="btn-check" name="open-select" id="select-program" autocomplete="off" @onclick="clickProgramSetting" checked = "@programChecked">
        <label class="btn btn-outline-dark" for="select-program">プログラム</label>
    </div>
</div>
<div class="url-block">
    <div class="input-group mb-3">
        <button class="btn btn-outline-secondary" type="button" id="button-addon1" @onclick="CreateURL">URLを生成</button>
        <input type="text" class="form-control" @bind-value="url"  readonly aria-describedby="button-addon1">
    </div>
</div>
<div class="control-views">
    @if (ControllerMenuVisible)
    {
        <div class="controller-tab over-control">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind-value="isDirected" id="c1-direction">
                <label class="form-check-label" for="c1-direction">
                    有向グラフ
                </label>
            </div>
            <div class="border-radius5">
                <p>node</p>
                <div class="nodes list-group">
                    @foreach (var node in Nodes)
                    {
                        if (SelectedNode == node)
                        {
                            <button type="button" class="list-group-item list-group-item-action active">@(node.ID + ":" + node.Title)</button>

                        }
                        else
                        {
                            <button type="button" @onclick="()=>SelectNode(node)" class="list-group-item list-group-item-action">@(node.ID + ":" + node.Title)</button>

                        }
                    }

                </div>
                @if (SelectedNode != null)
                {

                    <div class="remove">
                        <span>nodeの削除</span>
                        <button class="button-right btn btn-danger" @onclick="clickNodeDelete">nodeの削除</button>

                    </div>
                    <div class="edit">
                        <p>選択中nodeの編集</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">nodeのタイトル</span>
                            <input type="text" class="form-control" @bind="editNodeTitle">
                        </div>
                        <button class="button-right btn btn-primary" @onclick="clickNodeEdit">nodeの編集</button>
                    </div>
                }


                <div class="create">
                    <p>nodeの追加</p>
                    <div class="input-group mb-3">
                        <span class="input-group-text">ID</span>
                        <input type="text" class="form-control" @bind="createNodeId">
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">nodeのタイトル</span>
                        <input type="text" class="form-control" @bind="createNodeTitle">
                    </div>
                    <button class="button-right btn btn-primary" @onclick="clickNodeCreate">nodeの追加</button>
                    <p style="color:red">@warningCreateNode</p>

                </div>
            </div>
            @if (SelectedNode != null)
            {
                <div class="border-radius5">
                    <p>edge</p>
                    <div class="edges list-group">

                        @foreach (var edge in SelectedNode.ToEdges)
                        {
                            if (SelectedToEdge != null && SelectedToEdge.ID == edge.ID)
                            {
                                <button type="button" class="list-group-item list-group-item-action active">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                            else
                            {
                                <button type="button" @onclick="()=>SelectToEdge(edge)" class="list-group-item list-group-item-action">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                        }

                    </div>
                    @if (SelectedToEdge != null)
                    {
                        <div class="remove">
                            <span>edgeの削除</span>
                            <button class="button-right btn btn-danger" @onclick="clickEdgeDelete">edgeを削除</button>

                        </div>

                        <div class="edit">

                            <p>edgeの編集</p>
                            <div class="input-group mb-3">
                                <span class="input-group-text">edgeの重み</span>
                                <input class="form-control" type="number" @bind="editEdgeWeighInput">
                            </div>

                            <div class="input-group mb-3">
                                <span class="input-group-text">接続先のnode</span>
                                <select @bind="EditToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                    @if (EditToEdgeNodeSelected == null)
                                    {
                                        <option value="@("")" selected>nodeの選択</option>

                                    }
                                    else
                                    {
                                        <option value="@("")">nodeの選択</option>

                                    }
                                    @foreach (var nodeSelect in Nodes)
                                    {
                                        @if (EditToEdgeNodeSelected == nodeSelect.ID)
                                        {
                                            <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                        }
                                        else
                                        {

                                            <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>


                                        }


                                    }

                                </select>
                            </div>

                            <button class="button-right btn btn-primary" @onclick="clickEdgeEdit">edgeを編集</button>
                            <p style="color:red">@editEdgeWarning</p>


                        </div>

                    }
                    <div class="create">
                        <p>edgeを追加</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">edgeの重み</span>
                            <input type="number" class="form-control" @bind="createEdgeWeighInput">
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">接続先のnode</span>
                            <select @bind="CreateToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                @if (CreateToEdgeNodeSelected == null || CreateToEdgeNodeSelected == "")
                                {
                                    <option value="@("")" selected>nodeの選択</option>
                                }
                                else
                                {
                                    <option value="@("")">nodeの選択</option>

                                }
                                @foreach (var nodeSelect in Nodes)
                                {
                                    @if (CreateToEdgeNodeSelected == nodeSelect.ID)
                                    {
                                        <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                    }
                                    else
                                    {

                                        <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>
                                    }


                                }

                            </select>
                        </div>

                        <button class="button-right btn btn-primary" @onclick="clickEdgeCreate">edgeを追加</button>
                        <p style="color:red">@createEdgeWarning</p>
                    </div>
                </div>

            }


        </div>

    }
    else if (ProgramMenuVisible)
    {
        <div class="over-control code-control">
            <p>C#のコード</p>
            <textarea class="form-control code-area" @bind="sourceCode"/>
        </div>
    }
    <div class="base">
        <div class="controller lritem">

            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind-value="isDirected" id="c2-direction">
                <label class="form-check-label" for="c2-direction">
                    有向グラフ
                </label>
            </div>
            <div class="border-radius5">
                <p>node</p>
                <div class="nodes list-group">
                    @foreach (var node in Nodes)
                    {
                        if (SelectedNode == node)
                        {
                            <button type="button" class="list-group-item list-group-item-action active">@(node.ID + ":" + node.Title)</button>

                        }
                        else
                        {
                            <button type="button" @onclick="()=>SelectNode(node)" class="list-group-item list-group-item-action">@(node.ID + ":" + node.Title)</button>

                        }
                    }

                </div>
                @if (SelectedNode != null)
                {

                    <div class="remove">
                        <span>nodeの削除</span>
                        <button class="button-right btn btn-danger" @onclick="clickNodeDelete">nodeの削除</button>

                    </div>
                    <div class="edit">
                        <p>選択中nodeの編集</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">nodeのタイトル</span>
                            <input type="text" class="form-control" @bind="editNodeTitle">
                        </div>
                        <button class="button-right btn btn-primary" @onclick="clickNodeEdit">nodeの編集</button>
                    </div>
                }


                <div class="create">
                    <p>nodeの追加</p>
                    <div class="input-group mb-3">
                        <span class="input-group-text">ID</span>
                        <input type="text" class="form-control" @bind="createNodeId">
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">nodeのタイトル</span>
                        <input type="text" class="form-control" @bind="createNodeTitle">
                    </div>
                    <button class="button-right btn btn-primary" @onclick="clickNodeCreate">nodeの追加</button>
                    <p style="color:red">@warningCreateNode</p>

                </div>
            </div>
            @if (SelectedNode != null)
            {
                <div class="border-radius5">
                    <p>edge</p>
                    <div class="edges list-group">

                        @foreach (var edge in SelectedNode.ToEdges)
                        {
                            if (SelectedToEdge != null && SelectedToEdge.ID == edge.ID)
                            {
                                <button type="button" class="list-group-item list-group-item-action active">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                            else
                            {
                                <button type="button" @onclick="()=>SelectToEdge(edge)" class="list-group-item list-group-item-action">@($"({SelectedNode.ID}:{SelectedNode.Title}) - ({edge.ToNode.ID}:{edge.ToNode.Title})")</button>

                            }
                        }

                    </div>
                    @if (SelectedToEdge != null)
                    {
                        <div class="remove">
                            <span>edgeの削除</span>
                            <button class="button-right btn btn-danger" @onclick="clickEdgeDelete">edgeを削除</button>

                        </div>

                        <div class="edit">

                            <p>edgeの編集</p>
                            <div class="input-group mb-3">
                                <span class="input-group-text">edgeの重み</span>
                                <input class="form-control" type="number" @bind="editEdgeWeighInput">
                            </div>

                            <div class="input-group mb-3">
                                <span class="input-group-text">接続先のnode</span>
                                <select @bind="EditToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                    @if (EditToEdgeNodeSelected == null)
                                    {
                                        <option value="@("")" selected>nodeの選択</option>

                                    }
                                    else
                                    {
                                        <option value="@("")">nodeの選択</option>

                                    }
                                    @foreach (var nodeSelect in Nodes)
                                    {
                                        @if (EditToEdgeNodeSelected == nodeSelect.ID)
                                        {
                                            <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                        }
                                        else
                                        {

                                            <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>


                                        }


                                    }

                                </select>
                            </div>

                            <button class="button-right btn btn-primary" @onclick="clickEdgeEdit">edgeを編集</button>
                            <p style="color:red">@editEdgeWarning</p>


                        </div>

                    }
                    <div class="create">
                        <p>edgeを追加</p>
                        <div class="input-group mb-3">
                            <span class="input-group-text">edgeの重み</span>
                            <input type="number" class="form-control" @bind="createEdgeWeighInput">
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">接続先のnode</span>
                            <select @bind="CreateToEdgeNodeSelected" class="form-select" aria-label="Default select example">
                                @if (CreateToEdgeNodeSelected == null || CreateToEdgeNodeSelected == "")
                                {
                                    <option value="@("")" selected>nodeの選択</option>

                                }
                                else
                                {
                                    <option value="@("")">nodeの選択</option>

                                }
                                @foreach (var nodeSelect in Nodes)
                                {
                                    @if (CreateToEdgeNodeSelected == nodeSelect.ID)
                                    {
                                        <option value="@nodeSelect.ID" selected>@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>

                                    }
                                    else
                                    {

                                        <option value="@nodeSelect.ID">@($"{nodeSelect.ID}:{nodeSelect.Title}")</option>


                                    }


                                }

                            </select>
                        </div>

                        <button class="button-right btn btn-primary" @onclick="clickEdgeCreate">edgeを追加</button>
                        <p style="color:red">@createEdgeWarning</p>


                    </div>
                </div>

            }

        </div>
        <div  class="center-item">
            <div id="cy"></div>
            <div class="output">
                <textarea id="output-area" class="form-control output-area" style="color:@(outputColor)" readonly @bind="output">

                </textarea>
            </div>
        </div>
        <div class="code-base code-control">
            <p>C#のコード</p>
            <textarea class="form-control code-area" @bind="sourceCode">

            </textarea>
        </div>

    </div>
</div>



<style>
    .base{
    display:flex;
    justify-items:stretch;
    justify-content: space-between;
    height:calc(100vh - 50px - 40px);
    }



    .control-header{
    height:50px;
    background-color:darkgray;
    display:flex;
    justify-content:flex-start;
    align-items:center;
    gap:20px;
    flex-wrap:wrap;
    text-align:center;
    padding:5px 20px;
    box-sizing:border-box;
    }

    .menu-header {

    display: none;
    }
    @@media screen and  (max-width:680px) {
    .base{
    height:calc(100vh - 80px - 60px - 40px);

    }
    .control-header{
    height:80px;

    }

    .menu-header {
    box-sizing: border-box;
    padding: 10px;
    height: 60px;
    width: 100%;
    display: flex;
    gap:20px;
    background-color:#AAAAAA;
    }
    }
    .interval-number{
    width:200px

    }
    .controller{
    background-color:lightgray;
    padding:10px;
    overflow: auto;
    overflow-y: scroll;
    width: 400px;
    min-width:300px;
    }

    .center-item {
    flex-grow: 1;
    min-width:300px;
    }
    #cy{
    height: calc(100% - 100px);
    width:100%;
    }
    .output{
    height:100px;
    }
    .output-area{
    height:100%;
    }

    @@media screen and (max-width:820px) {
    .center-item {
    min-width: 200px;
    }
    }

    @@media screen and (max-width:500px) {
    .center-item {
    min-width: 30px;
    }
    }


    .edge{
    height:400px;
    }
    .nodes{
    max-height:200px;

    overflow: auto;
    overflow-y: scroll;
    }

    .edges {
    max-height: 200px;
    overflow: auto;
    overflow-y: scroll;
    }

    .remove {
    background-color: #f3f3f3;
    margin: 5px;
    border-radius: 5px;
    padding: 10px;
    }
    .edit {
    background-color: #f3f3f3;
    margin:5px;
    border-radius: 5px;
    padding: 10px;
    }
    .border-radius5{
    border-radius: 5px;
    border: 1px solid gray;
    padding: 10px;
    margin-bottom: 30px;
    }
    .create{
    background-color: #f3f3f3;
    padding:10px;
    margin: 5px;
    border-radius: 5px;
    }

    .button-right{
    display: block;
    margin-left: auto;
    margin-right:0;
    }
    .code-control{
    background-color:white;
    }
    .code-base{
    width:400px;
    min-width: 200px;

    }
    .code-area
    {
    width:100%;
    height: calc(100% - 120px - 40px);
    }

    @@media screen and (max-width:680px) {
    .code-base {
    display:none;
    }

    .controller {
    display:none;
    }
    }
    .url-block{
    height:40px;
    }
    .controller-tab {
    position:sticky;
    width:100vw;
    top:0;
    left:0;
    }
    .over-control {
    display:none;
    }
    @@media screen and  (max-width:680px){
    .over-control {
    display:block;
    position: absolute;

    width: 100vw;
    top: 0;
    left: 0;
    height: 80vh;
    background-color: white;
    z-index: 999;
    }
    }



    .control-views{
    position:relative;
    }
</style>
@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string? code { get; set; }
    [SupplyParameterFromQuery]
    [Parameter]
    public string? base64code { get; set; }
    [SupplyParameterFromQuery]
    [Parameter]
    public string? graph { get; set; }
    string url = "";
    string output = "";
    string sourceCode = "";
    string? controlChecked = null;
    string baseAddress = "";
    async Task CreateURL()
    {
        var baseurl = navigation.Uri.Split('?').First();
        JsonNodeEdge jsonNodeEdge = new JsonNodeEdge();
        jsonNodeEdge.ToDirect = isDirected;
        jsonNodeEdge.Edges = Node.Edges.Select(x => x.ToInternalEdge()).ToList();
        jsonNodeEdge.Nodes = Node.Nodes.Select(x => x.ToInternalNode()).ToList();
        var jsonString = JsonSerializer.Serialize(jsonNodeEdge,options);
        var d = JsonSerializer.Deserialize<JsonNodeEdge>(jsonString,options);
        string json =await CodeChange.CodeToParameter(jsonString);
        string source = await CodeChange.CodeToParameter(sourceCode);
        string sss = await CodeChange.ParameterToCode(source);

        url = baseurl + $"?code={source}&graph={json}";

    }
    bool ControllerMenuVisible
    {
        get{
            if(controlChecked == "checked")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        set
        {
            controlChecked = value ? "checked" : null;
        }
    }
    string? programChecked = null    ;
    bool ProgramMenuVisible
    {
        get
        {
            if (programChecked == "checked")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        set
        {
            programChecked = value ? "checked" : null;
        }
    }

    bool isInterval = false;
    bool _isDirected = false;
    bool isDirected
    {
        get
        {
            return _isDirected;
        }
        set
        {
            _isDirected = value;
            Node.IsDirected = value;
        }
    }
    double RunInterval = 0;
    string createEdgeWarning = "";
    string createEdgeWeighInput ="-1";
    string CreateToEdgeNodeSelected;
    string EditToEdgeNodeSelected;
    string editEdgeWeighInput = "-1";
    List<Node> Nodes = new List<Node>();
    ToEdge SelectedToEdge;
    Node SelectedNode;
    string editEdgeWarning = "";
    bool IsInitialized = false;
    string createNodeTitle = "";
    string createNodeId = "";
    string editNodeTitle = "";
    string warningCreateNode = "";
    string outputColor = "black";

    void StopProgram()
    {

        NowNode = null;
        NowAction = null;
        wait_button = false;
    }
    void clear()
    {
        Nodes.ForEach(x => { x.Color = "#666"; x.IsVisited = false; });
        Nodes.ForEach(x => x.ToEdges.ToList().ForEach(x => x.Color = "#ccc"));
    }
    async void RunProgram()
    {
        clear();
        outputColor = "black";
        output = "";
        Assembly? assembly;
        var error = Compiler.Compile(sourceCode, out assembly);
        if(error.Length > 0)
        {
            foreach(var e in error)
            {
                output += e + "\n";
            }
            outputColor = "red";
            await JSRuntime.InvokeVoidAsync("moveCursorToEnd", "output-area");

            return;
        }
        var methodinfo = Compiler.RunMethodGet(typeof(GraphAction), assembly, "Action");
        var type = methodinfo.DeclaringType;
        instance = Activator.CreateInstance(type);
        Func<Node,Node> action = methodinfo.CreateDelegate<Func<Node?,Node>>(instance);
        var startnode = Nodes.Where(x => x.ID == "start").FirstOrDefault();
        if(startnode == null)
        {
            startnode = Nodes.FirstOrDefault();
        }
        if(startnode == null)
        {
            return;
        }
        NowAction = action;
        NowNode = NowAction.Invoke(startnode);
        wait_button = true;
        if (NowNode != null)
        {
            wait_button = true;
        }
        else
        {
            StopProgram();

        }
    }
    Object instance;
    Node NowNode = null;
    Func<Node?, Node>? NowAction = null;
    void nextStep()
    {
        wait_button = false;
        NowNode = NowAction.Invoke(NowNode);
        if(NowNode != null)
        {
            wait_button = true;
        }
        else
        {
            StopProgram();

        }
        StateHasChanged();
    }

    bool isMoved = false;
    void clickViewNodeSetting()
    {
        ControllerMenuVisible = !ControllerMenuVisible;
        if (ControllerMenuVisible)
        {
            ProgramMenuVisible = false;
        }
        StateHasChanged();
    }
    void clickProgramSetting()
    {
        ProgramMenuVisible = !ProgramMenuVisible;
        if (ProgramMenuVisible)
        {
            ControllerMenuVisible = false;
        }
    }

    bool _isAutoRunning;


    bool isAutoRunning
    {
        get
        {
            return _isAutoRunning;
        }
        set
        {
            _isAutoRunning = value;
        }
    }

    void clickNodeDelete()
    {
        SelectedNode.Delete();
    }
    void clickNodeCreate()
    {
        if(Nodes.Where(x=>x.ID == createNodeId).Count() > 0)
        {
            warningCreateNode = "存在するIDです。";

            return;
        }
        Node.Create(createNodeId, createNodeTitle);
        createNodeId = "";
        createNodeTitle = "";
    }
    void clickNodeEdit()
    {
        SelectedNode.Title = editNodeTitle;
    }
    void SelectToEdge(ToEdge toEdge)
    {

        SelectedToEdge = toEdge;
        editEdgeWeighInput = toEdge.Weight.ToString();
        EditToEdgeNodeSelected = toEdge.ToNode.ID;
        StateHasChanged();
    }

    void clickEdgeCreate()
    {
        int weight = 0;
        if (!int.TryParse(createEdgeWeighInput,out weight))
        {
            createEdgeWarning = "edgeの重みは数値にしてください";
            StateHasChanged();

            return;
        }
        var targetNode = Nodes.Where(x => x.ID == CreateToEdgeNodeSelected).FirstOrDefault();
        if(targetNode == default(Node))
        {
            if (CreateToEdgeNodeSelected == null || CreateToEdgeNodeSelected == "")
            {
                createEdgeWarning = "nodeを選択してください";

            }
            else
            {
                createEdgeWarning = "削除されたnodeです";

            }

            return;
        }
        SelectedNode.CreateToEdge(targetNode, weight);
        StateHasChanged();
    }
    void clickEdgeDelete()
    {
        if(SelectedToEdge != null)
        {
            SelectedToEdge.Delete();
        }
    }
    void clickEdgeEdit()
    {
        int weight = 0;
        if (!int.TryParse(editEdgeWeighInput, out weight))
        {
            editEdgeWarning = "edgeの重みは数値にしてください";
            return;
        }
        var targetNode = Nodes.Where(x => x.ID == EditToEdgeNodeSelected).FirstOrDefault();
        if (targetNode == default(Node))
        {
            if(EditToEdgeNodeSelected == null||EditToEdgeNodeSelected == "")
            {
                editEdgeWarning = "nodeを選択してください";

            }
            else
            {
                editEdgeWarning = "削除されたnodeです";

            }
            return;
        }
        SelectedToEdge.ToNode = targetNode;
        SelectedToEdge.Weight = weight;
        StateHasChanged();
    }
    void SelectNode(Node node)
    {
        if (node == SelectedNode)
        {
            return;
        }
        SelectedNode = node;
        SelectedToEdge = null;
        createEdgeWeighInput = "-1";
        CreateToEdgeNodeSelected = "";
        editNodeTitle = node.Title;

    }
    JsonSerializerOptions options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
            WriteIndented = true,
            PropertyNameCaseInsensitive = true,

        };
    Compiler Compiler;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            Compiler = new Compiler(ScriptService);
            IsInitialized = false;
            if(code == null)
            {
                code = base64code;
            }
            if(code != null)
            {
                string code = "";
                try{
                    code = await CodeChange.ParameterToCode(this.code);

                }
                catch(Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                sourceCode = code;
            }
            else{
                sourceCode = Compiler.BaseCode;
            }
            bool direct = false;
            if(graph !=null){

                graph = await CodeChange.ParameterToCode(graph);
                var data = JsonSerializer.Deserialize<JsonNodeEdge>(graph,options);
                direct = data.ToDirect;

                data.Nodes.ForEach(x => Node.Create(x.id, x.color, x.title));
                var nodes = Node.Nodes.ToList();
                data.Edges.ForEach(x =>
                {
                    var node1 = nodes.Where(y => x.source == y.ID).FirstOrDefault();
                    var node2 = nodes.Where(y => x.target == y.ID).FirstOrDefault();

                    if(node1 != null)
                    {
                        node1.CreateToEdge(node2, int.TryParse(x.weight, out int w) ? w : -1);//重みの設定がない場合(InternalEdge以外では-1として処理される？)、InternalEdgeのweightは空の文字列となるため、int.TryParseで判定する
                    }
                });
            }
            else
            {
                var node0 = Node.Create("start", "#666", "start");
                var node1 = Node.Create("1", "#666", "1");
                var node2 = Node.Create("2", "#666", "2");
                var node3 = Node.Create("3", "#666", "3");
                var node4 = Node.Create("4", "#666", "4");
                var node5 = Node.Create("5", "#666", "5");
                var node6 = Node.Create("6", "#666", "6");
                var node7 = Node.Create("end", "#666", "end");
                node0.CreateToEdge(node1, -1);
                node0.CreateToEdge(node2, -1);
                node2.CreateToEdge(node3, -1);
                node3.CreateToEdge(node0, -1);
                node3.CreateToEdge(node4, -1);
                node4.CreateToEdge(node5, -1);
                node3.CreateToEdge(node6, -1);
                node3.CreateToEdge(node5, -1);

                node6.CreateToEdge(node1, -1);
                node4.CreateToEdge(node7, -1);
            }



            EdgeAndNode en = new EdgeAndNode();
            Nodes = Node.Nodes.ToList();

            en.Nodes = Nodes.Select(x => new InNodeObject { data = x.ToInternalNode() }).ToList();
            en.Edges = Node.Edges.Select(x => new InEdgeObject { data = x.ToInternalEdge() }).ToList();
            await JSRuntime.InvokeVoidAsync("drawGraph", "cy",en);
            Node.ColorChange = NodeColorChange;
            Node.CreateNode = CreateNode;
            Node.DeleteNode = DeleteNode;
            ToEdge.ColorChange = EdgeColorChange;
            ToEdge.DeleteChange = EdgeDelete;
            ToEdge.WeightChange = WeightChange;
            ToEdge.ToNodeChange = ToNodeChange;
            Node.CreateEdge= CreateEdge;
            Node.TitleChange = NodeTitleChange;
            Node.DirectedChange = DirectedChange;
            InternalClass.PrintAfter = Print;
            isDirected = direct;
            StateHasChanged();
        }

    }
    async void Print(string str)
    {
        this.output += str + "\n";
        await JSRuntime.InvokeVoidAsync("moveCursorToEnd", "output-area");
        StateHasChanged();

    }

    bool tmp = false;
    string? wait_button_str = "disabled";
    bool wait = true;
    bool wait_button
    {
        get{
            if (wait_button_str == "disabled")
            {
                return false;
            }
            else{
                return true;
            }
        }
        set
        {
            wait_button_str = value ?null:"disabled";
        }
    }


    void WaitProgram()
    {
        if(isInterval){
            
            Task.Delay((int)(1000 * RunInterval));
            StateHasChanged();

        }
        else
        {
            wait_button = true;
            wait = true;
            while (wait)
            {
                Task.Delay(100);


            }
        }

    }

    async Task click()
    {

    }
    async void DirectedChange(bool directed)
    {
        await JSRuntime.InvokeVoidAsync("isDirected", directed);

    }
    async void NodeTitleChange(Node node)
    {
        await JSRuntime.InvokeVoidAsync("updateNode", node.ToInternalNode());

    }
    async void EdgeColorChange(Edge edge)
    {
        await JSRuntime.InvokeVoidAsync("updateEdge", edge.ToInternalEdge());
    }
    async void WeightChange(Edge edge)
    {
        await JSRuntime.InvokeVoidAsync("updateEdge", edge.ToInternalEdge());

    }
    async void EdgeDelete(Edge edge)
    {
        if(SelectedNode.ToEdges.Where(x=>x.ID == edge.ID).Count() > 0)
        {
            if(SelectedToEdge.ID == edge.ID)
            {
                SelectedToEdge = null;
            } 
            StateHasChanged();
        }
        await JSRuntime.InvokeVoidAsync("removeAtId", edge.ID);
    }
    async void EdgeWeightChange(Edge edge)
    {
        await JSRuntime.InvokeVoidAsync("updateEdge", edge.ToInternalEdge());

    }
    async void ToNodeChange(Edge edge)
    {
        await JSRuntime.InvokeVoidAsync("updateEdge", edge.ToInternalEdge());

    }

    async void NodeColorChange(Node node)
    {
        await JSRuntime.InvokeVoidAsync("updateNode", node.ToInternalNode());

    }

    async void CreateNode(Node node)
    {
        Nodes = Node.Nodes.ToList();
        await JSRuntime.InvokeVoidAsync("nodeAdd", node.ToInternalNode());

        StateHasChanged();
    }

    async void CreateEdge(Edge edge)
    {
        Nodes = Node.Nodes.ToList();
        await JSRuntime.InvokeVoidAsync("edgeAdd", edge.ToInternalEdge());
        StateHasChanged();
    }
    async void DeleteNode(Node node)
    {

        Nodes = Node.Nodes.ToList();
        if (!Nodes.Contains(SelectedNode))
        {
            SelectedNode = null;
        }
        await JSRuntime.InvokeVoidAsync("removeAtId", node.ID);

        StateHasChanged();
    }
}
